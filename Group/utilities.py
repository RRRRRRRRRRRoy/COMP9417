import numpy as np


def load_data(dataset_name: str = 'train', onehot: bool = False, shuffle: bool = True, seed: int = 10):
    """
    * dataset_name: 'train'(default, 61876 rows), 'test', or 'sampleSubmisstion';
    * return features(93 features), labels(9 classes in one-hot), ids, names of each coloums.
    """
    f = open("D:\{dataset_name}")
    data = f.readlines()
    f.close()
    cols = data.pop(0)
    data = [i.strip().split(',') for i in data]
    ids = [i.pop(0) for i in data]
    labels = [i.pop() for i in data]
    features = [[int(j) for j in i] for i in data]
    labels_num = [int(i.split('_')[1]) for i in labels]
    if onehot:
        labels = list()
        for i in labels_num:
            current_label = [0] * 9
            current_label[i - 1] = 1
            labels.append(current_label)
    else:
        labels = labels_num
    features, labels, cols = np.array(
        features, dtype="float"), np.array(labels), np.array(cols)
    if shuffle:
        shuffleIndex = np.arange(labels.shape[0])
        np.random.seed(seed)
        np.random.shuffle(shuffleIndex)
        features = features[shuffleIndex]
        labels = labels[shuffleIndex]
    return features, labels, (ids, cols)


def loss(y_ture, log_prob):
    """
    log_prob should be generated by predict_log_proba from sklearn modules
    """
    N = len(y_ture)
    result = 0.0
    for i in range(N):
        result += log_prob[i][y_ture[i] - 1]
    return -result / N


if __name__ == '__main__':
    x, y, z = load_data(shuffle=False)
    print(x.shape)
    print(x[1])
    # print(y[:10])
